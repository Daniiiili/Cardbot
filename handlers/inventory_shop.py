from telebot import types
from loader import bot
import os
import config
import random
from database import players_data
from config import ARTIFACT_PRICE, ARTIFACTS_FOLDER


# üèÜ –ü–æ–±–µ–¥–∞
@bot.message_handler(func=lambda m: m.text.lower() in ["–ø–æ–±–µ–¥–∞", "üèÜ –ø–æ–±–µ–¥–∞"])
def handle_victory(message):
    user_id = message.from_user.id
    data = players_data.get(user_id)
    if not data or not data["nick"]:
        bot.reply_to(message, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!")
        return
    if data["battles"] >= config.BATTLE_LIMIT:
        bot.reply_to(message, "‚ö†Ô∏è –¢—ã –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –±–æ—ë–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    data["yen"] += 10
    data["crystals"] += 2
    data["wins"] += 1
    data["battles"] += 1
    bot.reply_to(message, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {data['nick']}!\n+10 –π–µ–Ω üí¥\n+2 –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ üíé\nüìä –û—Å—Ç–∞–ª–æ—Å—å –±–æ—ë–≤: {config.BATTLE_LIMIT - data['battles']}")


# üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
@bot.message_handler(func=lambda m: m.text.lower() in ["–ø–æ—Ä–∞–∂–µ–Ω–∏–µ", "üíÄ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ"])
def handle_defeat(message):
    user_id = message.from_user.id
    data = players_data.get(user_id)
    if not data or not data["nick"]:
        bot.reply_to(message, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!")
        return
    if data["battles"] >= config.BATTLE_LIMIT:
        bot.reply_to(message, "‚ö†Ô∏è –¢—ã –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –±–æ—ë–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    data["yen"] += 5
    data["crystals"] += 1
    data["losses"] += 1
    data["battles"] += 1
    bot.reply_to(message, f"{data['nick']}, –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è!\n+5 –π–µ–Ω üí¥\n+1 –∫—Ä–∏—Å—Ç–∞–ª–ª üíé\nüìä –û—Å—Ç–∞–ª–æ—Å—å –±–æ—ë–≤: {config.BATTLE_LIMIT - data['battles']}")


# üßç –ü—Ä–æ—Ñ–∏–ª—å
@bot.message_handler(func=lambda m: m.text.lower() in ["–ø—Ä–æ—Ñ–∏–ª—å", "üßç –ø—Ä–æ—Ñ–∏–ª—å"])
def show_profile(message):
    user_id = message.from_user.id
    data = players_data.get(user_id)
    if not data or not data["nick"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    nick = data["nick"]
    text = (
        f"–ü—Ä–æ—Ñ–∏–ª—å: {nick}\n"
        f"–ô–µ–Ω—ã: {data['yen']}\n"
        f"–ö—Ä–∏—Å—Ç–∞–ª–ª—ã: {data['crystals']}\n"
        f"–ü–æ–±–µ–¥—ã: {data['wins']}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {data['losses']}\n"
        f"–ë–æ–µ–≤ —Å–µ–≥–æ–¥–Ω—è: {data['battles']}/{config.BATTLE_LIMIT}"
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"), types.KeyboardButton("–ü—Ä–æ–∫–∞—á–∫–∞ –∫–∞—Ä—Ç"))
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, text, reply_markup=markup)


# üÉè –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
@bot.message_handler(func=lambda m: m.text.lower() in ["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "üÉè –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"])
def show_inventory(message):
    user_id = message.from_user.id
    data = players_data.get(user_id)

    if not data:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.")
        return

    # üÉè –û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã
    if data.get("cards"):
        cards = list(data["cards"].items())
        max_per_batch = 10
        for i in range(0, len(cards), max_per_batch):
            batch = cards[i:i+max_per_batch]
            media_group = []
            for card_file, count in batch:
                file_path = os.path.join("cards", card_file)
                media_group.append(types.InputMediaPhoto(open(file_path, 'rb')))
            bot.send_media_group(message.chat.id, media_group)

        caption_lines = ["–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:"]
        for card_file, count in cards:
            name = os.path.splitext(card_file)[0].capitalize()
            caption_lines.append(f"{name} x{count}")
        bot.send_message(message.chat.id, "\n".join(caption_lines))

    # ü™Ñ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    artifacts = data.get("artifacts", {})
    if artifacts:
        artifact_list = list(artifacts.items())
        max_per_batch = 10
        for i in range(0, len(artifact_list), max_per_batch):
            batch = artifact_list[i:i+max_per_batch]
            media_group = []
            for artifact_file, count in batch:
                file_path = os.path.join(ARTIFACTS_FOLDER, artifact_file)
                media_group.append(types.InputMediaPhoto(open(file_path, 'rb')))
            bot.send_media_group(message.chat.id, media_group)

        caption_lines = ["–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"]
        for artifact_file, count in artifact_list:
            name = os.path.splitext(artifact_file)[0]
            caption_lines.append(f"{name} x{count}")
        bot.send_message(message.chat.id, "\n".join(caption_lines))
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")


# üí¨ –ë–µ—Å–µ–¥–∞
@bot.message_handler(func=lambda m: m.text.lower() in ["–±–µ—Å–µ–¥–∞", "üí¨ –±–µ—Å–µ–¥–∞"])
def chat_link(message):
    bot.send_message(
        message.chat.id,
        "üí¨ –ù–∞—à–∞ –±–µ—Å–µ–¥–∞ —Ç—É—Ç:",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=config.CHAT_LINK)
        )
    )


# ü™ô –î–æ–Ω–∞—Ç
@bot.message_handler(func=lambda m: m.text.lower() in ["–¥–æ–Ω–∞—Ç", "ü™ô –¥–æ–Ω–∞—Ç"])
def donate(message):
    bot.send_message(message.chat.id, "ü™ô –î–æ–Ω–∞—Ç ‚Äî —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ.")


# üõç –ú–∞–≥–∞–∑–∏–Ω
@bot.message_handler(func=lambda m: m.text.lower() in ["–º–∞–≥–∞–∑–∏–Ω", "üõç –º–∞–≥–∞–∑–∏–Ω"])
def shop(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ö—É–ø–∏—Ç—å –ø–∞–∫"), types.KeyboardButton("–ö—É–ø–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"))
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω:\n–ü–∞–∫–∏ ‚Äî 100 –π–µ–Ω, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã ‚Äî 300 –π–µ–Ω.", reply_markup=markup)


# üéÅ –ü–æ–∫—É–ø–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
@bot.message_handler(func=lambda m: m.text.lower() in ["–∫—É–ø–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç", "ü™Ñ –∫—É–ø–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"])
def buy_artifact(message):
    user_id = message.from_user.id
    data = players_data.get(user_id)

    if not data or not data["nick"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.")
        return
    if data["yen"] < ARTIFACT_PRICE:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –π–µ–Ω (–Ω—É–∂–Ω–æ {ARTIFACT_PRICE}).")
        return

    all_artifacts = os.listdir(ARTIFACTS_FOLDER)
    artifact = random.choice(all_artifacts)
    data["yen"] -= ARTIFACT_PRICE
    data["artifacts"][artifact] = data["artifacts"].get(artifact, 0) + 1

    artifact_name = os.path.splitext(artifact)[0]
    file_path = os.path.join(ARTIFACTS_FOLDER, artifact)
    with open(file_path, "rb") as art:
        bot.send_photo(message.chat.id, art, caption=f"‚ú® –¢—ã –ø–æ–ª—É—á–∏–ª –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {artifact_name}")


# üéÅ –ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–∞
@bot.message_handler(func=lambda m: m.text.lower() in ["–∫—É–ø–∏—Ç—å –ø–∞–∫", "üéÅ –∫—É–ø–∏—Ç—å –ø–∞–∫"])
def buy_pack(message):
    user_id = message.from_user.id
    data = players_data.get(user_id)

    if not data or not data["nick"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!")
        return
    if data["yen"] < config.PACK_PRICE:
        bot.send_message(message.chat.id, f"‚ùå –ù—É–∂–Ω–æ {config.PACK_PRICE} –π–µ–Ω.")
        return

    data["yen"] -= config.PACK_PRICE
    all_cards = os.listdir(config.CARDS_FOLDER)
    new_card = random.choice(all_cards)
    data["cards"][new_card] = data["cards"].get(new_card, 0) + 1

    card_name = os.path.splitext(new_card)[0]
    with open(os.path.join(config.CARDS_FOLDER, new_card), "rb") as card:
        bot.send_photo(message.chat.id, card, caption=f"üéâ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞: {card_name} (x{data['cards'][new_card]})")


# –ù–∞–∑–∞–¥
@bot.message_handler(func=lambda m: m.text.lower() in ["–Ω–∞–∑–∞–¥", "‚¨Ö –Ω–∞–∑–∞–¥"])
def back_to_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton("–ë–µ—Å–µ–¥–∞"))
    markup.add(types.KeyboardButton("–î–æ–Ω–∞—Ç"), types.KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω"))
    bot.send_message(message.chat.id, "üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
