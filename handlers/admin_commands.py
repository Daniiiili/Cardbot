from loader import bot
from database import players_data
import os
from config import ADMIN_ID, CARDS_FOLDER, ARTIFACTS_FOLDER

CARDS2_FOLDER = "cards_2"  # –≤—Ç–æ—Ä–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç


# üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∏–∂–Ω–∏—Ö –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
def resolve_file(name_raw: str, folders: list[str], default_ext=".jpg") -> str | None:
    base = name_raw.strip()
    candidates = []

    # —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if not os.path.splitext(base)[1]:
        candidates.append(base + default_ext)
    candidates.append(base)
    base_us = base.replace(" ", "_")
    if not os.path.splitext(base_us)[1]:
        candidates.append(base_us + default_ext)
    candidates.append(base_us)

    for folder in folders:
        if not os.path.isdir(folder):
            continue
        try:
            files = os.listdir(folder)
        except Exception:
            continue
        lower_map = {f.lower(): f for f in files}
        for cand in candidates:
            real = lower_map.get(cand.lower())
            if real:
                return os.path.join(folder, real)
    return None


# üß© –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ –Ω–∏–∫—É
def find_user_by_nick(nick):
    for uid, data in players_data.items():
        if data.get("nick") == nick:
            return uid, data
    return None, None


# üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def admin_only(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return False
    return True


# üí¥ –ô–ï–ù–´
@bot.message_handler(commands=['add_yen'])
def add_yen(message):
    if not admin_only(message): return
    try:
        _, nick, amount = message.text.split()
        amount = int(amount)
        _, data = find_user_by_nick(nick)
        if not data:
            bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        data["yen"] += amount
        bot.reply_to(message, f"üí¥ {nick} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {data['yen']} –π–µ–Ω.")
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /add_yen –Ω–∏–∫ —á–∏—Å–ª–æ")

@bot.message_handler(commands=['remove_yen'])
def remove_yen(message):
    if not admin_only(message): return
    try:
        _, nick, amount = message.text.split()
        amount = int(amount)
        _, data = find_user_by_nick(nick)
        if not data:
            bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        data["yen"] = max(0, data["yen"] - amount)
        bot.reply_to(message, f"üí¥ {nick} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {data['yen']} –π–µ–Ω.")
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /remove_yen –Ω–∏–∫ —á–∏—Å–ª–æ")


# üíé –ö–†–ò–°–¢–ê–õ–õ–´
@bot.message_handler(commands=['add_crystals'])
def add_crystals(message):
    if not admin_only(message): return
    try:
        _, nick, amount = message.text.split()
        amount = int(amount)
        _, data = find_user_by_nick(nick)
        if not data:
            bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        data["crystals"] += amount
        bot.reply_to(message, f"üíé {nick} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {data['crystals']} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤.")
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /add_crystals –Ω–∏–∫ —á–∏—Å–ª–æ")

@bot.message_handler(commands=['remove_crystals'])
def remove_crystals(message):
    if not admin_only(message): return
    try:
        _, nick, amount = message.text.split()
        amount = int(amount)
        _, data = find_user_by_nick(nick)
        if not data:
            bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        data["crystals"] = max(0, data["crystals"] - amount)
        bot.reply_to(message, f"üíé {nick} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {data['crystals']} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤.")
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /remove_crystals –Ω–∏–∫ —á–∏—Å–ª–æ")


# üèÜ –ü–û–ë–ï–î–´ / –ü–û–†–ê–ñ–ï–ù–ò–Ø
@bot.message_handler(commands=['add_wins'])
def add_wins(message):
    if not admin_only(message): return
    try:
        _, nick, amount = message.text.split()
        amount = int(amount)
        _, data = find_user_by_nick(nick)
        if not data:
            bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        data["wins"] += amount
        bot.reply_to(message, f"üèÜ {nick} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {data['wins']} –ø–æ–±–µ–¥.")
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /add_wins –Ω–∏–∫ —á–∏—Å–ª–æ")

@bot.message_handler(commands=['remove_wins'])
def remove_wins(message):
    if not admin_only(message): return
    try:
        _, nick, amount = message.text.split()
        amount = int(amount)
        _, data = find_user_by_nick(nick)
        if not data:
            bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        data["wins"] = max(0, data["wins"] - amount)
        bot.reply_to(message, f"üèÜ {nick} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {data['wins']} –ø–æ–±–µ–¥.")
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /remove_wins –Ω–∏–∫ —á–∏—Å–ª–æ")

@bot.message_handler(commands=['add_losses'])
def add_losses(message):
    if not admin_only(message): return
    try:
        _, nick, amount = message.text.split()
        amount = int(amount)
        _, data = find_user_by_nick(nick)
        if not data:
            bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        data["losses"] += amount
        bot.reply_to(message, f"üíÄ {nick} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {data['losses']} –ø–æ—Ä–∞–∂–µ–Ω–∏–π.")
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /add_losses –Ω–∏–∫ —á–∏—Å–ª–æ")

@bot.message_handler(commands=['remove_losses'])
def remove_losses(message):
    if not admin_only(message): return
    try:
        _, nick, amount = message.text.split()
        amount = int(amount)
        _, data = find_user_by_nick(nick)
        if not data:
            bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        data["losses"] = max(0, data["losses"] - amount)
        bot.reply_to(message, f"üíÄ {nick} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {data['losses']} –ø–æ—Ä–∞–∂–µ–Ω–∏–π.")
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /remove_losses –Ω–∏–∫ —á–∏—Å–ª–æ")


# üÉè –î–û–ë–ê–í–ò–¢–¨ / –£–î–ê–õ–ò–¢–¨ –ö–ê–†–¢–£ (–≤–∫–ª—é—á–∞—è 2 –ª–≤–ª)
@bot.message_handler(commands=['add_card'])
def add_card(message):
    if not admin_only(message): return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /add_card –Ω–∏–∫ –∏–º—è_–∫–∞—Ä—Ç—ã")
        return
    _, nick, card_name = parts

    _, data = find_user_by_nick(nick)
    if not data:
        bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    path = resolve_file(card_name, [CARDS_FOLDER, CARDS2_FOLDER])
    if not path:
        bot.reply_to(message, f"‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {CARDS_FOLDER} –∏–ª–∏ {CARDS2_FOLDER}.")
        return

    file = os.path.basename(path)
    data.setdefault("cards", {})
    data["cards"][file] = data["cards"].get(file, 0) + 1
    bot.reply_to(message, f"üÉè –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ {os.path.splitext(file)[0]} –∏–≥—Ä–æ–∫—É {nick}.")

@bot.message_handler(commands=['remove_card'])
def remove_card(message):
    if not admin_only(message): return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /remove_card –Ω–∏–∫ –∏–º—è_–∫–∞—Ä—Ç—ã")
        return
    _, nick, card_name = parts

    _, data = find_user_by_nick(nick)
    if not data or "cards" not in data:
        bot.reply_to(message, "‚ö†Ô∏è –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç.")
        return

    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞a
    candidates = [card_name.strip(), card_name.strip() + ".jpg", card_name.replace(" ", "_")]
    candidates += [card_name.replace(" ", "_") + ".jpg"]
    inv_lower = {k.lower(): k for k in data["cards"].keys()}
    file_key = None
    for c in candidates:
        file_key = inv_lower.get(c.lower())
        if file_key:
            break

    if not file_key:
        bot.reply_to(message, "‚ö†Ô∏è –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã.")
        return

    data["cards"][file_key] -= 1
    if data["cards"][file_key] <= 0:
        del data["cards"][file_key]
    bot.reply_to(message, f"üÉè –ö–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: {os.path.splitext(file_key)[0]} —É {nick}.")


# üí† –î–û–ë–ê–í–ò–¢–¨ / –£–î–ê–õ–ò–¢–¨ –ê–†–¢–ï–§–ê–ö–¢
@bot.message_handler(commands=['add_artifact'])
def add_artifact(message):
    if not admin_only(message): return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /add_artifact –Ω–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞")
        return
    _, nick, art_name = parts

    _, data = find_user_by_nick(nick)
    if not data:
        bot.reply_to(message, "‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    path = resolve_file(art_name, [ARTIFACTS_FOLDER])
    if not path:
        bot.reply_to(message, f"‚ùå –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {ARTIFACTS_FOLDER}.")
        return

    file = os.path.basename(path)
    data.setdefault("artifacts", {})
    data["artifacts"][file] = data["artifacts"].get(file, 0) + 1
    bot.reply_to(message, f"üí† –î–æ–±–∞–≤–ª–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç {os.path.splitext(file)[0]} –∏–≥—Ä–æ–∫—É {nick}.")

@bot.message_handler(commands=['remove_artifact'])
def remove_artifact(message):
    if not admin_only(message): return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /remove_artifact –Ω–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ_–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞")
        return
    _, nick, art_name = parts

    _, data = find_user_by_nick(nick)
    if not data or "artifacts" not in data:
        bot.reply_to(message, "‚ö†Ô∏è –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
        return

    candidates = [art_name.strip(), art_name.strip() + ".jpg", art_name.replace(" ", "_")]
    candidates += [art_name.replace(" ", "_") + ".jpg"]
    inv_lower = {k.lower(): k for k in data["artifacts"].keys()}
    file_key = None
    for c in candidates:
        file_key = inv_lower.get(c.lower())
        if file_key:
            break

    if not file_key:
        bot.reply_to(message, "‚ö†Ô∏è –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞.")
        return

    data["artifacts"][file_key] -= 1
    if data["artifacts"][file_key] <= 0:
        del data["artifacts"][file_key]
    bot.reply_to(message, f"üí† –ê—Ä—Ç–µ—Ñ–∞–∫—Ç —É–¥–∞–ª—ë–Ω: {os.path.splitext(file_key)[0]} —É {nick}.")
