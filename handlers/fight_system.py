from loader import bot
from database import active_fights, players_data
from threading import Timer
import time
import random
from main import bot
from telebot import types

@bot.message_handler(commands=['—Ñ–ª–∏–ø'])
@bot.message_handler(func=lambda message: message.text.lower() == "—Ñ–ª–∏–ø")
def flip_coin(message):
    # 50/50 —à–∞–Ω—Å
    result = random.choice(["–•–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ ‚öîÔ∏è", "–•–æ–¥–∏—Ç –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ ‚öîÔ∏è"])

    # –î–æ–±–∞–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
    bot.send_message(
        message.chat.id,
        "ü™ô –ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...",
    )

    # –ß–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    import time
    time.sleep(1)
    bot.send_message(
        message.chat.id,
        f"üé≤ {result}"
    )

# üßë –°—É–¥—å—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ–π
@bot.message_handler(func=lambda m: m.text.lower() == "—Å—É–¥—å—è–±–æ—Ç")
def start_judge(message):
    chat_id = message.chat.id
    thread_id = message.message_thread_id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –Ω–µ—Ç –ª–∏ –±–æ—è —É–∂–µ
    for f in active_fights.values():
        if f["chat_id"] == chat_id and f["thread_id"] == thread_id:
            bot.reply_to(message, "‚ö†Ô∏è –í —ç—Ç–æ–π —Ç–µ–º–µ —É–∂–µ –∏–¥—ë—Ç –±–æ–π.")
            return

    fight_id = f"fight_{chat_id}_{thread_id}_{int(time.time())}"
    active_fights[fight_id] = {
        "chat_id": chat_id,
        "thread_id": thread_id,
        "players": [],
        "score": [0, 0],
        "round": 1,
        "ready": set(),
        "state": "waiting_ready",
        "judge": user_id
    }

    bot.send_message(chat_id, "‚öîÔ∏è –°—É–¥–µ–π—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–æ!\n–ì–æ—Ç–æ–≤—ã? –î–≤–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' üëä", message_thread_id=thread_id)

# üì• –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
@bot.message_handler(func=lambda m: m.text.lower() == "–¥–∞")
def player_ready(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    thread_id = message.message_thread_id

    for fight_id, fight in active_fights.items():
        if fight["chat_id"] != chat_id or fight["thread_id"] != thread_id:
            continue

        if user_id not in fight["players"] and len(fight["players"]) < 2:
            fight["players"].append(user_id)

        fight["ready"].add(user_id)

        if len(fight["ready"]) == 2 and len(fight["players"]) == 2:
            p1_id, p2_id = fight["players"]
            nick1 = players_data.get(p1_id, {}).get("nick", f"–ò–≥—Ä–æ–∫ {p1_id}")
            nick2 = players_data.get(p2_id, {}).get("nick", f"–ò–≥—Ä–æ–∫ {p2_id}")
            bot.send_message(chat_id, f"‚öîÔ∏è –ë–æ–π –Ω–∞—á–∞–ª—Å—è!\nüë§ {nick1}\nüë§ {nick2}", message_thread_id=thread_id)
            start_round(fight_id)
        return

# üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—É–Ω–¥–∞
def start_round(fight_id):
    fight = active_fights[fight_id]
    fight["state"] = "preparing"
    bot.send_message(fight["chat_id"], f"‚öîÔ∏è –†–∞—É–Ω–¥ {fight['round']}: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞...", message_thread_id=fight["thread_id"])
    Timer(5, announce_throw, args=[fight_id]).start()

# üÉè –ù–∞—á–∞–ª–æ –∫–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç
def announce_throw(fight_id):
    fight = active_fights.get(fight_id)
    if not fight or fight["state"] != "preparing":
        return
    fight["state"] = "waiting_cards"
    bot.send_message(fight["chat_id"], "üÉè –ö–∏–¥–∞–µ–º –∫–∞—Ä—Ç—ã!", message_thread_id=fight["thread_id"])

# üßë‚Äç‚öñÔ∏è –°—É–¥—å—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
@bot.message_handler(func=lambda m: m.text.lower().startswith("–ø–æ–±–µ–¥–∏–ª"))
def judge_round(message):
    parts = message.text.lower().split()
    if len(parts) != 2 or parts[1] not in ["1", "2"]:
        return

    chat_id = message.chat.id
    thread_id = message.message_thread_id
    user_id = message.from_user.id

    for fight_id, fight in active_fights.items():
        if fight["chat_id"] != chat_id or fight["thread_id"] != thread_id:
            continue

        if user_id != fight["judge"]:
            bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ —Å—É–¥—å—è –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")
            return

        if fight["state"] != "waiting_cards":
            bot.reply_to(message, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")
            return

        winner_index = int(parts[1]) - 1
        fight["score"][winner_index] += 1
        fight["round"] += 1

        p1_id, p2_id = fight["players"]
        nick1 = players_data.get(p1_id, {}).get("nick", f"–ò–≥—Ä–æ–∫ {p1_id}")
        nick2 = players_data.get(p2_id, {}).get("nick", f"–ò–≥—Ä–æ–∫ {p2_id}")

        bot.send_message(
            chat_id,
            f"‚úÖ –ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {winner_index+1} ({nick1 if winner_index == 0 else nick2})\n"
            f"üìä –°—á—ë—Ç: {fight['score'][0]} ‚Äì {fight['score'][1]}",
            message_thread_id=thread_id
        )

        if fight["score"][winner_index] == 2:
            winner_nick = nick1 if winner_index == 0 else nick2
            bot.send_message(chat_id, f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_nick}!", message_thread_id=thread_id)
            del active_fights[fight_id]
        else:
            start_round(fight_id)
        return

# ‚õî –°—Ç–æ–ø –±–æ—è
@bot.message_handler(func=lambda m: m.text.lower() == "—Å—Ç–æ–ø")
def stop_fight(message):
    chat_id = message.chat.id
    thread_id = message.message_thread_id
    user_id = message.from_user.id

    for fight_id, fight in list(active_fights.items()):
        if fight["chat_id"] == chat_id and fight["thread_id"] == thread_id and user_id in fight["players"]:
            bot.send_message(chat_id, "‚õî –ë–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", message_thread_id=thread_id)
            del active_fights[fight_id]
            return
